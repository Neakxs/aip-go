package genaip

import (
	"fmt"

	"go.einride.tech/aip/reflect/aipreflect"
	"go.einride.tech/aip/reflect/aipregistry"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoregistry"
)

// PluginName is the name of the AIP Go protobuf compiler plugin.
const PluginName = "protoc-gen-go-aip"

const generatedFilenameSuffix = ".aip.go"

// Run the AIP Go protobuf compiler plugin.
func Run(gen *protogen.Plugin) error {
	var files protoregistry.Files
	for _, file := range gen.Files {
		if err := files.RegisterFile(file.Desc); err != nil {
			return err
		}
	}
	resources, err := aipregistry.NewResources(&files)
	if err != nil {
		return err
	}
	genAIP := &plugin{gen: gen, resources: resources}
	for _, file := range gen.Files {
		if !file.Generate {
			continue
		}
		if err := genAIP.generateFile(file); err != nil {
			return err
		}
	}
	return nil
}

type plugin struct {
	gen       *protogen.Plugin
	resources *aipregistry.Resources
}

func (p *plugin) protocVersion() string {
	if v := p.gen.Request.GetCompilerVersion(); v != nil {
		return fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
	}
	return "(unknown)"
}

func (p *plugin) newGeneratedFile(file *protogen.File) *protogen.GeneratedFile {
	g := p.gen.NewGeneratedFile(file.GeneratedFilenamePrefix+generatedFilenameSuffix, file.GoImportPath)
	g.P("// Code generated by ", PluginName, ". DO NOT EDIT.")
	g.P("//")
	g.P("// versions:")
	g.P("// \t", PluginName, " ", PluginVersion)
	g.P("// \tprotoc ", p.protocVersion())
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	return g
}

func (p *plugin) generateFile(file *protogen.File) error {
	g := p.newGeneratedFile(file)
	g.Skip()
	var errResult error
	p.resources.RangeResources(func(resource *aipreflect.ResourceDescriptor) bool {
		if resource.ParentFile != file.Desc.Path() {
			return true
		}
		g.Unskip()
		if err := newResourceNameCodeGenerator(resource).GenerateCode(g); err != nil {
			errResult = err
			return false
		}
		return true
	})
	return errResult
}
